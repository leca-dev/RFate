% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PRE_FATE.speciesDistanceCombine.R
\name{PRE_FATE.speciesDistanceCombine}
\alias{PRE_FATE.speciesDistanceCombine}
\title{Combine several dissimilarity distance matrices}
\usage{
PRE_FATE.speciesDistanceCombine(
  list.mat.dist,
  opt.min.noMat = length(list.mat.dist),
  opt.normal = TRUE,
  opt.weights = NULL
)
}
\arguments{
\item{list.mat.dist}{a \code{list} of matrices containing dissimilarity 
distance values between each pair of species.}

\item{opt.min.noMat}{(\emph{optional}) default \code{length(list.mat.dist)}. \cr 
An \code{integer} corresponding to the minimal number of distance matrices for 
which each species should have values}

\item{opt.normal}{(\emph{optional}) default \code{TRUE}. \cr 
If \code{TRUE}, all given distance matrices will be normalized 
(see \href{PRE_FATE.speciesDistanceCombine#details}{\code{Details}})}

\item{opt.weights}{(\emph{optional}) default \code{NULL}. \cr 
A \code{vector} of \code{double} (between \code{0} and \code{1}) 
corresponding to the weights for each distance matrix provided in 
\code{list.mat.dist}. They must sum up to \code{1}.}
}
\value{
A \code{matrix} containing the weighted (or not) combination of 
the different transformed (or not) distance matrices given. \cr \cr

The information for the combination of all distances is written in 
\file{PRE_FATE_DOMINANT_speciesDistance.csv} file.
}
\description{
This script is designed to create a distance matrix between 
species, combining several dissimilarity distance matrices.
}
\details{
This function allows to obtain a \strong{distance matrix between species}, 
based on several dissimilarity distance matrices \strong{combined} 
according to the following formula :

\deqn{\text{mat.DIST} = \Sigma (\text{wei.i} * \text{mat.DIST}_{i})}

If \code{opt.normal = TRUE}, two \emph{normalization} steps are applied 
to each distance matrix before combining them :

\enumerate{
  \item a \strong{non-paranormal (npn)} transformation 
  (\code{\link[huge]{huge.npn}} function) to obtain Gaussian distributions 
  for all dissimilarity matrices used
  \item  a \strong{range} normalization to bring the values back between 
  \code{0} and \code{1} :
  
  \deqn{\text{mat.DIST}_{i} = \frac{\text{mat.DIST}_{i} - 
  min(\text{mat.DIST}_{i})}{max(\text{mat.DIST}_{i}) - 
  min(\text{mat.DIST}_{i})}}
}
}
\examples{

## Load example data
Champsaur_PFG = .loadData('Champsaur_PFG', 'RData')

## Species traits
tab.traits = Champsaur_PFG$sp.traits
tab.traits = tab.traits[, c('species', 'GROUP', 'MATURITY', 'LONGEVITY'
                            , 'HEIGHT', 'DISPERSAL', 'LIGHT', 'NITROGEN')]
str(tab.traits)

## Species niche overlap (dissimilarity distances)
DIST.overlap = Champsaur_PFG$mat.overlap
DIST.overlap[1:5, 1:5]

## Species functional distances (dissimilarity)
DIST.traits = PRE_FATE.speciesDistanceTraits(mat.traits = tab.traits
                                             , opt.maxPercent.NA = 0.05
                                             , opt.maxPercent.similarSpecies = 0.3
                                             , opt.min.sd = 0.3)
DIST.traits$Chamaephyte[1:5, 1:5]

## Combine distances ---------------------------------------------------------
list.DIST = list(DIST.overlap, DIST.traits$Chamaephyte)
sp.DIST.n = PRE_FATE.speciesDistanceCombine(list.mat.dist = list.DIST
                                            , opt.weights = c(0.2, 0.8))
sp.DIST.un = PRE_FATE.speciesDistanceCombine(list.mat.dist = list.DIST
                                             , opt.norm = FALSE
                                             , opt.weights = c(0.2, 0.8))
str(sp.DIST.n)



\dontrun{
require(corrplot)
list.DIST = list(DIST.overlap, DIST.traits$Chamaephyte
                 , sp.DIST.un, sp.DIST.n)
names(list.DIST) = c('overlap', 'traits', 'un-normed', 'normed')

par(mfrow = c(2, 2))
for (li in 1:length(list.DIST))
{
  tmp = list.DIST[[li]]
  tmp = tmp[colnames(sp.DIST.n), colnames(sp.DIST.n)]
  corrplot(tmp, method = 'shade'
           , type = 'lower', cl.lim = c(0, 1)
           , is.corr = FALSE, title = names(list.DIST)[li])
}

require(foreach); require(ggplot2); require(ggdendro)
hc = hclust(as.dist(sp.DIST.n))
pp = ggdendrogram(hc, rotate = TRUE) +
  labs(title = 'Hierarchical clustering based on species distances')
plot(pp)
}


}
\seealso{
\code{\link[huge]{huge.npn}}
}
\author{
Maya Gu√©guen
}
\keyword{distance}
\keyword{functional}
